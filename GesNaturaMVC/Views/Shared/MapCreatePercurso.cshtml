@model GesNaturaMVC.ViewModels.PercursoVM

<style>
    #map {
        height: 400px;
        width: 100%;
    }

    #create {
        height: 300px;
        width: 25%;
    }

    .controls {
        margin-top: 10px;
        border: 1px solid transparent;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        height: 32px;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
    }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 300px;
    }

        #pac-input:focus {
            border-color: #4d90fe;
        }

    .pac-container {
        font-family: Roboto;
    }

    #type-selector {
        color: #fff;
        background-color: #4d90fe;
        padding: 5px 11px 0px 11px;
    }

        #type-selector label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }

    #target {
        width: 345px;
    }
</style>
<input id="pac-input" class="controls" type="text" placeholder="Search Box">
<div id="map"></div>
<script>

  var map;
  var marker;
 
  function initMap() {

    var model = @Html.Raw(Json.Encode(Model));

    // Centro do mapa esta no Inicio do Percurso
    var centro = { lat: 41.151158, lng: -8.627560 };
    console.dir(centro);
    var infowindow = new google.maps.InfoWindow();
    var infoWindowPoi = new google.maps.InfoWindow();
    var infoWindowFoto = new google.maps.InfoWindow();
    

    var map = new google.maps.Map(document.getElementById('map'), {
      zoom: 5,
      center: centro,

      mapTypeId: 'hybrid',
      styles: [
          {   featureType: "label",
              stylers: [{ visibility: "on" }]
          }
      ]
    });

    // Create the search box and link it to the UI element.
    var input = document.getElementById('pac-input');
    var searchBox = new google.maps.places.SearchBox(input);
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

    // Bias the SearchBox results towards current map's viewport.
    map.addListener('bounds_changed', function () {
        searchBox.setBounds(map.getBounds());
    });

    var markers = [];
    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    searchBox.addListener('places_changed', function () {
        var places = searchBox.getPlaces();

        if (places.length == 0) {
            return;
        }
        // Clear out the old markers.
        markers.forEach(function (marker) {
            marker.setMap(null);
        });
        markers = [];

        // For each place, get the icon, name and location.
        var bounds = new google.maps.LatLngBounds();
        places.forEach(function (place) {
            if (!place.geometry) {
                console.log("Returned place contains no geometry");
                return;
            }
            var icon = {
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(25, 25)
            };
            // Create a marker for each place.
            markers.push(new google.maps.Marker({
                map: map,
                icon: icon,
                title: place.name,
                position: place.geometry.location
            }));

            if (place.geometry.viewport) {
                // Only geocodes have viewport.
                bounds.union(place.geometry.viewport);
            } else {
                bounds.extend(place.geometry.location);
            }
            });
                map.fitBounds(bounds);
            });
              var geocoder = new google.maps.Geocoder();

              //document.getElementById('latlng').addEventListener('click', function () {
              //    geocodeLatLng(geocoder, map);

              //});
             
          var gestao = "Selecao do local de inicio de percurso";
      
            google.maps.event.addListener(map, "click", function (event) {
                
          var latitude = event.latLng.lat();
          var longitude = event.latLng.lng();
          
          //var percurso = model.ID;
          var coordsrec = latitude + ';' + longitude;
          //console.log(latitude + ', ' + longitude);
          markerNovo = new google.maps.Marker({ position: event.latLng, map: map });


                geocodeLatLng(geocoder, map);

                var morada = "";
                //var codPostal = "";
                function geocodeLatLng(geocoder, map) {
                    //var input = document.getElementById('latlng').value;
                    //var latlngStr = input.split(',', 2);
                    var latlng = { lat: latitude, lng: longitude };

                    geocoder.geocode({ 'location': latlng }, function (results, status) {
                        if (status === 'OK') {
                            if (results[0]) {
                                //map.setZoom(11);
                                //var marker = new google.maps.Marker({
                                //    position: latlng,
                                //    map: map
                                //});
                                morada = results[0].formatted_address;
                                for (i=0; i < results.length; i++) {
                                    for (var j = 0; j < results[i].address_components.length; j++) {
                                        for (var k = 0; k < results[i].address_components[j].types.length; k++) {
                                            if (results[i].address_components[j].types[k] == "postal_code") {
                                                var codPostal = results[i].address_components[j].short_name;
                                                console.dir(codPostal);
                                            }
                                            //if (results[i].address_components[j].types[k] == "locality") {
                                            //    var localidade = results[i].address_component[j].short_name;
                                            //    console.dir(localidade);
                                            //}
                                        }
                                    }
                                }
                                
                                //infowindow.setContent(results[0].formatted_address);
                                //infowindow.open(map, marker);
                                
                            } else {
                                window.alert('No results found');
                            }
                        } else {
                            window.alert('Geocoder failed due to: ' + status);
                        }
                        @*var actionPercurso = '@Html.ActionLink("Gravar Coordenadas", "Create","Percursos", new { lat = "latitude", lng = "longitude", Morada = "morada",Localidade = "localidade",cod = "codPostal" },null)';*@
                        var actionPercurso = '@Html.ActionLink("Gravar Coordenadas", "Create","Percursos", new { lat = "latitude", lng = "longitude", Morada = "morada",cod = "codPostal" },null)';
                        actionPercurso = actionPercurso.replace('latitude', latitude);
                        actionPercurso = actionPercurso.replace('longitude', longitude);
                        actionPercurso = actionPercurso.replace('codPostal', codPostal);
                        actionPercurso = actionPercurso.replace('morada', morada);
                        //actionPercurso = actionPercurso.replace('localidade', localidade);
                            var texto = '<div>' + gestao + '</div>' + actionPercurso + '</div>';

                        infoWindowPoi.setContent(texto, markerNovo);
                        infoWindowPoi.open(map, markerNovo);
                    });
                }
                
          
          
                
    });
          

    }
    

</script>

@*<div id="create"></div>*@
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCEBJUK6YsccYEXnT_S2PU8PN5zXxkc4Fs&libraries=places&callback=initMap">
</script>



